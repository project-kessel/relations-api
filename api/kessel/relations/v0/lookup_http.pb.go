// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.25.1
// source: relations/v0/lookup.proto

package v0

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKesselLookupServiceLookupResources = "/kessel.relations.v0.KesselLookupService/LookupResources"

type KesselLookupServiceHTTPServer interface {
	LookupResources(context.Context, *LookupResourcesRequest) (*LookupResourcesResponse, error)
}

func RegisterKesselLookupServiceHTTPServer(s *http.Server, srv KesselLookupServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v0/resources", _KesselLookupService_LookupResources0_HTTP_Handler(srv))
}

func _KesselLookupService_LookupResources0_HTTP_Handler(srv KesselLookupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LookupResourcesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKesselLookupServiceLookupResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LookupResources(ctx, req.(*LookupResourcesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LookupResourcesResponse)
		return ctx.Result(200, reply)
	}
}

type KesselLookupServiceHTTPClient interface {
	LookupResources(ctx context.Context, req *LookupResourcesRequest, opts ...http.CallOption) (rsp *LookupResourcesResponse, err error)
}

type KesselLookupServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKesselLookupServiceHTTPClient(client *http.Client) KesselLookupServiceHTTPClient {
	return &KesselLookupServiceHTTPClientImpl{client}
}

func (c *KesselLookupServiceHTTPClientImpl) LookupResources(ctx context.Context, in *LookupResourcesRequest, opts ...http.CallOption) (*LookupResourcesResponse, error) {
	var out LookupResourcesResponse
	pattern := "/v0/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKesselLookupServiceLookupResources))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
