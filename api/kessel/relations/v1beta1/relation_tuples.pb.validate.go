// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kessel/relations/v1beta1/relation_tuples.proto

package v1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTuplesRequestMultiError, or nil if none found.
func (m *CreateTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Upsert

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTuplesRequestValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateTuplesRequestMultiError(errors)
	}

	return nil
}

// CreateTuplesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTuplesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTuplesRequestMultiError) AllErrors() []error { return m }

// CreateTuplesRequestValidationError is the validation error returned by
// CreateTuplesRequest.Validate if the designated constraints aren't met.
type CreateTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTuplesRequestValidationError) ErrorName() string {
	return "CreateTuplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTuplesRequestValidationError{}

// Validate checks the field values on CreateTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTuplesResponseMultiError, or nil if none found.
func (m *CreateTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTuplesResponseMultiError(errors)
	}

	return nil
}

// CreateTuplesResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTuplesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTuplesResponseMultiError) AllErrors() []error { return m }

// CreateTuplesResponseValidationError is the validation error returned by
// CreateTuplesResponse.Validate if the designated constraints aren't met.
type CreateTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTuplesResponseValidationError) ErrorName() string {
	return "CreateTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTuplesResponseValidationError{}

// Validate checks the field values on ReadTuplesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTuplesRequestMultiError, or nil if none found.
func (m *ReadTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFilter() == nil {
		err := ReadTuplesRequestValidationError{
			field:  "Filter",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetFilter(); a != nil {

	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadTuplesRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadTuplesRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadTuplesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadTuplesRequestMultiError(errors)
	}

	return nil
}

// ReadTuplesRequestMultiError is an error wrapping multiple validation errors
// returned by ReadTuplesRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTuplesRequestMultiError) AllErrors() []error { return m }

// ReadTuplesRequestValidationError is the validation error returned by
// ReadTuplesRequest.Validate if the designated constraints aren't met.
type ReadTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTuplesRequestValidationError) ErrorName() string {
	return "ReadTuplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTuplesRequestValidationError{}

// Validate checks the field values on ReadTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadTuplesResponseMultiError, or nil if none found.
func (m *ReadTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTuple()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadTuplesResponseValidationError{
					field:  "Tuple",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadTuplesResponseValidationError{
					field:  "Tuple",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTuple()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadTuplesResponseValidationError{
				field:  "Tuple",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadTuplesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadTuplesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadTuplesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadTuplesResponseMultiError(errors)
	}

	return nil
}

// ReadTuplesResponseMultiError is an error wrapping multiple validation errors
// returned by ReadTuplesResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadTuplesResponseMultiError) AllErrors() []error { return m }

// ReadTuplesResponseValidationError is the validation error returned by
// ReadTuplesResponse.Validate if the designated constraints aren't met.
type ReadTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadTuplesResponseValidationError) ErrorName() string {
	return "ReadTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadTuplesResponseValidationError{}

// Validate checks the field values on DeleteTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTuplesRequestMultiError, or nil if none found.
func (m *DeleteTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFilter() == nil {
		err := DeleteTuplesRequestValidationError{
			field:  "Filter",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetFilter(); a != nil {

	}

	if len(errors) > 0 {
		return DeleteTuplesRequestMultiError(errors)
	}

	return nil
}

// DeleteTuplesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTuplesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTuplesRequestMultiError) AllErrors() []error { return m }

// DeleteTuplesRequestValidationError is the validation error returned by
// DeleteTuplesRequest.Validate if the designated constraints aren't met.
type DeleteTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTuplesRequestValidationError) ErrorName() string {
	return "DeleteTuplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTuplesRequestValidationError{}

// Validate checks the field values on DeleteTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTuplesResponseMultiError, or nil if none found.
func (m *DeleteTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTuplesResponseMultiError(errors)
	}

	return nil
}

// DeleteTuplesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTuplesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTuplesResponseMultiError) AllErrors() []error { return m }

// DeleteTuplesResponseValidationError is the validation error returned by
// DeleteTuplesResponse.Validate if the designated constraints aren't met.
type DeleteTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTuplesResponseValidationError) ErrorName() string {
	return "DeleteTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTuplesResponseValidationError{}

// Validate checks the field values on RelationTupleFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationTupleFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationTupleFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationTupleFilterMultiError, or nil if none found.
func (m *RelationTupleFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationTupleFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ResourceNamespace != nil {
		// no validation rules for ResourceNamespace
	}

	if m.ResourceType != nil {
		// no validation rules for ResourceType
	}

	if m.ResourceId != nil {
		// no validation rules for ResourceId
	}

	if m.Relation != nil {
		// no validation rules for Relation
	}

	if m.SubjectFilter != nil {

		if all {
			switch v := interface{}(m.GetSubjectFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RelationTupleFilterValidationError{
						field:  "SubjectFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RelationTupleFilterValidationError{
						field:  "SubjectFilter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSubjectFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationTupleFilterValidationError{
					field:  "SubjectFilter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RelationTupleFilterMultiError(errors)
	}

	return nil
}

// RelationTupleFilterMultiError is an error wrapping multiple validation
// errors returned by RelationTupleFilter.ValidateAll() if the designated
// constraints aren't met.
type RelationTupleFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationTupleFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationTupleFilterMultiError) AllErrors() []error { return m }

// RelationTupleFilterValidationError is the validation error returned by
// RelationTupleFilter.Validate if the designated constraints aren't met.
type RelationTupleFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationTupleFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationTupleFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationTupleFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationTupleFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationTupleFilterValidationError) ErrorName() string {
	return "RelationTupleFilterValidationError"
}

// Error satisfies the builtin error interface
func (e RelationTupleFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationTupleFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationTupleFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationTupleFilterValidationError{}

// Validate checks the field values on SubjectFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubjectFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubjectFilterMultiError, or
// nil if none found.
func (m *SubjectFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.SubjectNamespace != nil {
		// no validation rules for SubjectNamespace
	}

	if m.SubjectType != nil {
		// no validation rules for SubjectType
	}

	if m.SubjectId != nil {
		// no validation rules for SubjectId
	}

	if m.Relation != nil {
		// no validation rules for Relation
	}

	if len(errors) > 0 {
		return SubjectFilterMultiError(errors)
	}

	return nil
}

// SubjectFilterMultiError is an error wrapping multiple validation errors
// returned by SubjectFilter.ValidateAll() if the designated constraints
// aren't met.
type SubjectFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectFilterMultiError) AllErrors() []error { return m }

// SubjectFilterValidationError is the validation error returned by
// SubjectFilter.Validate if the designated constraints aren't met.
type SubjectFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectFilterValidationError) ErrorName() string { return "SubjectFilterValidationError" }

// Error satisfies the builtin error interface
func (e SubjectFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectFilterValidationError{}
